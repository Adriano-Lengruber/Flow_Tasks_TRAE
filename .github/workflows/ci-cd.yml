name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, development ]
  pull_request:
    branches: [ master, main, development ]

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fusion_flow_test
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
    
    - name: Run quality checks
      run: cd backend && npm run quality:check
    
    - name: Run linting
      run: cd backend && npm run lint
    
    - name: Run unit tests
      run: cd backend && npm run test:unit
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fusion_flow_test
        JWT_SECRET: test-jwt-secret-for-ci
    
    - name: Run integration tests
      run: cd backend && npm run test:integration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fusion_flow_test
        JWT_SECRET: test-jwt-secret-for-ci
    
    - name: Run security audit
      run: cd backend && npm run security:audit
    
    - name: Run security scan
      run: cd backend && npm run security:scan
      continue-on-error: true
    
    - name: Generate test coverage
      run: cd backend && npm run test:cov
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fusion_flow_test
        JWT_SECRET: test-jwt-secret-for-ci
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci
    
    - name: Run linting
      run: cd frontend && npm run lint
    
    - name: Run unit tests
      run: cd frontend && npm test -- --coverage --watchAll=false
      env:
        CI: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Build backend
      run: cd backend && npm run build
    
    - name: Build frontend
      run: cd frontend && npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: |
          backend/dist/
          frontend/build/

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fusion_flow_e2e
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
    
    - name: Start backend
      run: |
        cd backend
        npm run start:prod &
        sleep 10
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fusion_flow_e2e
        JWT_SECRET: test-jwt-secret-for-e2e
        PORT: 3000
    
    - name: Start frontend
      run: |
        cd frontend
        npx serve -s build -l 3001 &
        sleep 5
    
    - name: Install Playwright
      run: npx playwright install --with-deps
    
    - name: Run E2E tests
      run: npx playwright test
      env:
        BASE_URL: http://localhost:3001
        API_URL: http://localhost:3000
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          test-results/
          playwright-report/

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, e2e-tests]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test-backend.result }}" != "success" ]]; then
          echo "Backend tests failed"
          exit 1
        fi
        if [[ "${{ needs.test-frontend.result }}" != "success" ]]; then
          echo "Frontend tests failed"
          exit 1
        fi
        if [[ "${{ needs.e2e-tests.result }}" != "success" ]]; then
          echo "E2E tests failed"
          exit 1
        fi
        echo "All tests passed! âœ…"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: github.ref == 'refs/heads/development' && github.event_name == 'push'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        # Aqui vocÃª adicionaria os comandos especÃ­ficos para deploy
        # Por exemplo: deploy para Heroku, AWS, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment..."
        # Aqui vocÃª adicionaria os comandos especÃ­ficos para deploy
        # Por exemplo: deploy para Heroku, AWS, etc.