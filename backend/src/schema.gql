# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Tipos de ações disponíveis para automações"""
enum ActionType {
  ASSIGN_TASK
  CREATE_TASK
  MOVE_TASK
  SEND_EMAIL
  SEND_NOTIFICATION
  UPDATE_TASK_PRIORITY
}

enum AnalyticsEventType {
  DUPLICATE
  EXPORT
  SCHEDULE
  SHARE
  VIEW
}

enum AnalyticsExportFormat {
  CSV
  EXCEL
  PDF
}

type AuthPayload {
  accessToken: String!
  user: User!
}

type Automation {
  actionParameters: String
  actionType: ActionType!
  createdAt: DateTime!
  createdBy: User!
  description: String
  executionCount: Float!
  id: ID!
  isActive: Boolean!
  lastExecutedAt: DateTime
  name: String!
  project: Project
  triggerConditions: String
  triggerType: TriggerType!
  updatedAt: DateTime!
}

type AutomationLog {
  actionResult: String
  automation: Automation!
  errorMessage: String
  executedAt: DateTime!
  executionTimeMs: Float!
  id: ID!
  relatedTaskId: String
  status: ExecutionStatus!
  triggerData: String
  triggeredBy: User
}

type BuilderField {
  aggregations: [String!]
  description: String
  formats: [String!]
  id: String!
  label: String!
  name: String!
  source: String!
  type: String!
}

type Comment {
  author: User!
  content: String!
  createdAt: DateTime!
  id: ID!
  task: Task!
  updatedAt: DateTime!
}

input CreateAutomationDto {
  actionParameters: String
  actionType: ActionType!
  description: String
  isActive: Boolean
  name: String!
  projectId: String
  triggerConditions: String
  triggerType: TriggerType!
}

input CreateCommentInput {
  content: String!
  taskId: String!
}

input CreateProjectInput {
  description: String
  endDate: String
  name: String!
  startDate: String
}

input CreateSectionInput {
  name: String!
  order: Float
  projectId: ID!
}

input CreateTaskInput {
  assigneeId: ID
  description: String
  dueDate: DateTime
  order: Float
  priority: TaskPriority
  sectionId: ID!
  title: String!
}

input CreateTemplateInput {
  category: TemplateCategory!
  description: String!
  fields: [TemplateFieldInput!]!
  filters: [TemplateFilterInput!]
  isPublic: Boolean
  name: String!
  tags: [String!]
  visualization: VisualizationConfigInput!
}

input CreateUserInput {
  email: String!
  name: String
  password: String!
}

type DataSource {
  description: String
  fields: [BuilderField!]!
  id: String!
  name: String!
  schema: String
  type: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Status de execução da automação"""
enum ExecutionStatus {
  FAILED
  SKIPPED
  SUCCESS
}

enum ExportFormat {
  CSV
  EXCEL
  PDF
}

"""Tipos de agregação para campos"""
enum FieldAggregation {
  AVG
  COUNT
  DISTINCT
  MAX
  MIN
  SUM
}

input LoginInput {
  email: String!
  password: String!
}

input MoveTaskInput {
  newOrder: Float!
  targetSectionId: ID!
  taskId: ID!
}

type Mutation {
  clearAllNotifications: Boolean!
  cloneReportTemplate(id: ID!, newName: String): ReportTemplate!
  createAutomation(createAutomationInput: CreateAutomationDto!): Automation!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  createProject(createProjectInput: CreateProjectInput!): Project!
  createReportTemplate(input: CreateTemplateInput!): ReportTemplate!
  createSection(createSectionInput: CreateSectionInput!): Section!
  createTask(createTaskInput: CreateTaskInput!): Task!
  deleteReportTemplate(id: ID!): Boolean!
  generateReportFromTemplate(templateId: ID!): Report!
  login(loginInput: LoginInput!): AuthPayload!
  markAllNotificationsAsRead: Boolean!
  markNotificationAsRead(notificationId: String!): Boolean!
  moveTask(moveTaskInput: MoveTaskInput!): Task!
  moveTaskToSection(id: ID!, sectionId: ID!): Task!
  removeAutomation(id: String!): Boolean!
  removeComment(id: ID!): Boolean!
  removeProject(id: ID!): Boolean!
  removeSection(id: ID!): Boolean!
  removeTask(id: ID!): Boolean!
  signup(createUserInput: CreateUserInput!): AuthPayload!
  toggleAutomationActive(id: String!): Automation!
  updateAutomation(id: String!, updateAutomationInput: UpdateAutomationDto!): Automation!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  updateNotificationPreferences(updateNotificationPreferencesInput: UpdateNotificationPreferencesInput!): NotificationPreferences!
  updateProject(updateProjectInput: UpdateProjectInput!): Project!
  updateReportTemplate(input: UpdateTemplateInput!): ReportTemplate!
  updateSection(updateSectionInput: UpdateSectionInput!): Section!
  updateTask(updateTaskInput: UpdateTaskInput!): Task!
}

type Notification {
  createdAt: DateTime!
  entityId: String
  entityType: String
  id: ID!
  message: String!
  read: Boolean!
  type: NotificationType!
  updatedAt: DateTime!
  user: User!
}

type NotificationPreferences {
  createdAt: DateTime!
  deadlineApproaching: Boolean!
  emailNotifications: Boolean!
  id: ID!
  projectCreated: Boolean!
  projectUpdated: Boolean!
  pushNotifications: Boolean!
  taskAssigned: Boolean!
  taskComment: Boolean!
  taskCompleted: Boolean!
  taskMoved: Boolean!
  updatedAt: DateTime!
  user: User!
}

"""Tipos de notificações disponíveis no sistema"""
enum NotificationType {
  DEADLINE_APPROACHING
  PROJECT_CREATED
  PROJECT_UPDATED
  SYSTEM
  TASK_ASSIGNED
  TASK_COMMENT
  TASK_COMPLETED
  TASK_MOVED
}

type PaginatedProjects {
  hasMore: Boolean!
  items: [Project!]!
  limit: Int!
  offset: Int!
  total: Int!
}

type PaginatedTasks {
  hasMore: Boolean!
  items: [Task!]!
  limit: Int!
  offset: Int!
  total: Int!
}

input PaginationInput {
  limit: Int = 20
  offset: Int = 0
}

type Project {
  createdAt: DateTime!
  description: String
  endDate: DateTime
  id: ID!
  name: String!
  owner: User
  sections: [Section!]
  startDate: DateTime
  updatedAt: DateTime!
}

type Query {
  automation(id: String!): Automation!
  automationLogs(automationId: String!): [AutomationLog!]!
  automations(projectId: String): [Automation!]!
  availableDataSources: [DataSource!]!
  comment(id: ID!): Comment!
  comments(taskId: ID!): [Comment!]!
  me: User!
  notificationPreferences: NotificationPreferences!
  notifications(limit: Float! = 50, offset: Float! = 0): [Notification!]!
  popularTemplates(limit: Float! = 10): [ReportTemplate!]!
  prebuiltTemplates: [ReportTemplate!]!
  project(id: ID!): Project!
  projects: [Project!]!
  projectsPaginated(pagination: PaginationInput): PaginatedProjects!
  recentActivities(limit: Float! = 10): [RecentActivity!]!
  reportTemplate(id: ID!): ReportTemplate!
  reportTemplates(filters: TemplateSearchInput): [ReportTemplate!]!
  section(id: ID!): Section!
  task(id: ID!): Task!
  tasksPaginated(pagination: PaginationInput, projectId: ID!): PaginatedTasks!
  templateUsageStats(templateId: ID!): TemplateUsageStats!
  unreadNotificationsCount: Float!
}

type RecentActivity {
  createdAt: DateTime!
  description: String
  id: ID!
  project: Project
  task: Task
  title: String!
  type: String!
  user: User!
}

type Report {
  analytics: [ReportAnalytics!]
  category: String
  createdAt: DateTime!
  createdBy: User!
  description: String!
  fields: String!
  filters: String
  groupBy: String
  id: ID!
  isActive: Boolean!
  isPublic: Boolean!
  metadata: String
  name: String!
  schedules: [ReportSchedule!]
  sortBy: String
  sortOrder: String!
  template: ReportTemplateType!
  updatedAt: DateTime!
}

type ReportAnalytics {
  createdAt: DateTime!
  eventType: AnalyticsEventType!
  executionTime: Float
  exportFormat: AnalyticsExportFormat
  filters: String
  id: ID!
  metadata: String
  recordCount: Float
  report: Report!
  reportId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type ReportSchedule {
  cronExpression: String!
  enabled: Boolean!
  format: ExportFormat!
  id: ID!
  name: String!
  recipients: [String!]!
  status: ScheduleStatus!
}

type ReportTemplate {
  category: TemplateCategory!
  createdAt: DateTime!
  createdBy: User!
  description: String!
  fields: String!
  filters: String
  id: ID!
  isActive: Boolean!
  isPremium: Boolean!
  isPublic: Boolean!
  layout: String
  metadata: String
  name: String!
  rating: Float!
  sampleData: String
  tags: [String!]
  thumbnail: String
  updatedAt: DateTime!
  usageCount: Float!
  visualization: String!
}

enum ReportTemplateType {
  CHART
  DASHBOARD
  SUMMARY
  TABLE
}

enum ScheduleStatus {
  ACTIVE
  COMPLETED
  ERROR
  PAUSED
}

type Section {
  createdAt: DateTime!
  id: ID!
  name: String!
  order: Float!
  project: Project!
  tasks: [Task!]
  updatedAt: DateTime!
}

type Task {
  assignee: User
  comments: [Comment!]
  completed: Boolean!
  createdAt: DateTime!
  description: String
  dueDate: DateTime
  id: ID!
  order: Float!
  priority: TaskPriority!
  section: Section!
  title: String!
  updatedAt: DateTime!
}

enum TaskPriority {
  HIGH
  LOW
  MEDIUM
  URGENT
}

"""Categorias de templates de relatórios"""
enum TemplateCategory {
  ANALYTICS
  CUSTOM
  FINANCIAL
  OPERATIONAL
  SALES
}

input TemplateFieldInput {
  aggregation: FieldAggregation
  defaultValue: String
  format: String
  id: String!
  label: String!
  name: String!
  required: Boolean
  source: String!
  type: String!
}

input TemplateFilterInput {
  fieldId: String!
  id: String!
  label: String!
  operator: String!
  required: Boolean
  value: String!
}

input TemplateSearchInput {
  category: TemplateCategory
  isPublic: Boolean
  search: String
  tags: [String!]
}

type TemplateUsageStats {
  createdAt: DateTime!
  lastUsed: DateTime!
  name: String!
  rating: Float!
  reportsCreated: Float!
  templateId: String!
  usageCount: Float!
}

"""Tipos de gatilhos disponíveis para automações"""
enum TriggerType {
  PROJECT_COMPLETED
  PROJECT_CREATED
  TASK_ASSIGNED
  TASK_COMPLETED
  TASK_CREATED
  TASK_DUE_DATE
  TASK_MOVED
}

input UpdateAutomationDto {
  actionParameters: String
  actionType: ActionType
  description: String
  isActive: Boolean
  name: String
  projectId: String
  triggerConditions: String
  triggerType: TriggerType
}

input UpdateCommentInput {
  content: String
  id: ID!
  taskId: String
}

input UpdateNotificationPreferencesInput {
  deadlineApproaching: Boolean
  emailNotifications: Boolean
  projectCreated: Boolean
  projectUpdated: Boolean
  pushNotifications: Boolean
  taskAssigned: Boolean
  taskComment: Boolean
  taskCompleted: Boolean
  taskMoved: Boolean
}

input UpdateProjectInput {
  description: String
  endDate: String
  id: ID!
  name: String
  startDate: String
}

input UpdateSectionInput {
  id: ID!
  name: String
  order: Float
  projectId: ID
}

input UpdateTaskInput {
  assigneeId: ID
  description: String
  dueDate: DateTime
  id: ID!
  order: Float
  priority: TaskPriority
  sectionId: ID
  title: String
}

input UpdateTemplateInput {
  category: TemplateCategory
  description: String
  fields: [TemplateFieldInput!]
  filters: [TemplateFilterInput!]
  id: ID!
  isPublic: Boolean
  name: String
  tags: [String!]
  visualization: VisualizationConfigInput
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  notificationPreferences: NotificationPreferences
  projects: [Project!]
  updatedAt: DateTime!
}

input VisualizationConfigInput {
  animation: Boolean
  colors: [String!]
  dataLabels: Boolean
  groupBy: String
  height: Float
  responsive: Boolean
  showGrid: Boolean
  showLegend: Boolean
  subtitle: String
  title: String
  type: VisualizationType!
  width: Float
  xAxis: String
  yAxis: String
}

"""Tipos de visualização disponíveis"""
enum VisualizationType {
  AREA
  BAR_CHART
  HEATMAP
  LINE_CHART
  METRIC
  PIE_CHART
  SCATTER
  TABLE
}